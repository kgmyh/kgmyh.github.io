I"W9<h1 id="heading-pathlib---객체-지향-파일-시스템-경로-관리">pathlib - 객체 지향 파일 시스템 경로 관리</h1>
<ul>
  <li><a href="https://docs.python.org/ko/3/library/pathlib.html">Document</a></li>
  <li>python 3.4에서 추가됨</li>
</ul>

<p>파이썬에서 경로를 다룰때는 os 모듈을 사용했다. os 모듈에서는 다양한 경로다루는 함수들을 제공하여 함수형으로 코드를 작성했다. <br />
pathlib는 경로를 객체지향 방식으로 다룬다.<br />
Path 객체에 경로를 넣고 메소드를 이용해 그 경로에 대한 여러가지 작업들을 처리한다.  또 연산자가 재정의(Overloading)되어 있어 연산자를 이용해 경로를 편하게 처리할 수 있다.  <br />
다음은 경로가 있는지 여부를 확인하는 코드를 os모듈과 pathlib 모듈을 비교한 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pathlib</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">src_path</span> <span class="o">=</span> <span class="sa">r</span><span class="s">"c:\src"</span>
<span class="c1"># os
</span><span class="n">flag</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">src_path</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">src_path</span><span class="si">}</span><span class="s"> 경로가 있는지 여부: </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="c1"># pathlib
</span><span class="n">path</span> <span class="o">=</span> <span class="n">pathlib</span><span class="p">.</span><span class="n">Path</span><span class="p">(</span><span class="n">src_path</span><span class="p">)</span>
<span class="n">flag</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">exists</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">src_path</span><span class="si">}</span><span class="s"> 경로가 있는지 여부: </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>os 모듈은 함수들을 제공하기 때문에 원하는 기능을 제공하는 함수에 경로를 문자열로 전달해서 처리한다.</li>
  <li>pathlib는 객체지향 방식이므로 Path객체에 경로를 넣고 메소드를 이용해 객체에 저장된 경로를 다룬다.</li>
</ul>

<h2 id="heading-path-클래스">Path 클래스</h2>
<ul>
  <li>경로를 attribute로 가지며 경로와 관련된 다양한 기능을 제공한다.</li>
  <li>객체 생성시 경로를 넣어 준다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root_path</span> <span class="o">=</span> <span class="n">pathlib</span><span class="p">.</span><span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">"c:\src"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="heading-path의-주요-attribute">Path의 주요 Attribute</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="n">file_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">"C:\src\test.py"</span><span class="p">)</span>
<span class="n">dir_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">"C:\src\sub_dir"</span><span class="p">)</span>

<span class="c1"># parts 속성 - 경로 구성 요소를 튜플로 묶어서 반환
</span><span class="k">print</span><span class="p">(</span><span class="n">file_path</span><span class="p">.</span><span class="n">parts</span><span class="p">)</span> <span class="c1"># ('C:\\', 'src', 'test.py')
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">parts</span><span class="p">)</span>  <span class="c1"># ('C:\\', 'src', 'sub_dir')
</span>
<span class="c1"># name 속성 - 경로 구성요소의 마지막 부분을 문자열로 반환
</span><span class="k">print</span><span class="p">(</span><span class="n">file_path</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># test.py
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>  <span class="c1"># sub_dir
</span>
<span class="c1"># suffix 속성 - 경로가 파일일 경우 확장자를 반환
</span><span class="k">print</span><span class="p">(</span><span class="n">file_path</span><span class="p">.</span><span class="n">suffix</span><span class="p">)</span> <span class="c1"># .py
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">suffix</span><span class="p">)</span>  <span class="c1"># None (확장자가 없으면 None반환)
</span>
<span class="c1"># stem 속성 - 마지막 구성요소에서 확장자를 뺀 마지막 부분을 반환
</span><span class="k">print</span><span class="p">(</span><span class="n">file_path</span><span class="p">.</span><span class="n">stem</span><span class="p">)</span>   <span class="c1"># test (파일일 경우 확장자를 뺀 파일명을 반환)
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">stem</span><span class="p">)</span>    <span class="c1"># sub_dir (디렉토리일 경우 디렉토리명을 반환)
</span></code></pre></div></div>

<h3 id="heading-path의-주요-메소드">Path의 주요 메소드</h3>

<h4 id="heading-조회관련-메소드">조회관련 메소드</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># cwd() : class 메소드로 현재 디렉토리 조회
</span><span class="k">print</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">cwd</span><span class="p">())</span>

<span class="c1"># exists(): 경로의 자원이 있는지 여부
</span><span class="k">print</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\src\test.py'</span><span class="p">).</span><span class="n">exists</span><span class="p">())</span> <span class="c1"># True: 있는 경우
</span><span class="k">print</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\abcdefg'</span><span class="p">).</span><span class="n">exists</span><span class="p">())</span> <span class="c1"># False: 없는 경우
</span>
<span class="n">dir_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\src'</span><span class="p">)</span>
<span class="n">file_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\src\test.py'</span><span class="p">)</span>

<span class="c1"># is_dir(): 디렉토리 경로인지 여부, is_file(): 파일 경로인지 여부
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">is_dir</span><span class="p">(),</span> <span class="n">file_path</span><span class="p">.</span><span class="n">is_dir</span><span class="p">())</span>    <span class="c1"># True, False
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">is_file</span><span class="p">(),</span> <span class="n">file_path</span><span class="p">.</span><span class="n">is_file</span><span class="p">())</span>  <span class="c1">#False, True
</span>
<span class="c1"># glob(pattern): 디렉토리 경로 안에 있는 하위 디렉토리, 파일들 중 pattern과 일치하는 것들의 경로를 제공하는 generator반환
# pattern: * - 모든 것, ** - 모든 하위디렉토리.
</span><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">glob</span><span class="p">(</span><span class="s">"*"</span><span class="p">)))</span> <span class="c1"># 모든 하위 요소들의 경로
</span><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">glob</span><span class="p">(</span><span class="s">"*.py"</span><span class="p">)))</span> <span class="c1"># 확장자가 .py인 모든 파일들
</span><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">glob</span><span class="p">(</span><span class="s">"**/*.txt"</span><span class="p">)))</span> <span class="c1"># 모든 하위 경로의 파일 중 확장자가 txt인 파일들.
</span>
<span class="c1"># samefile(other Path): 두 경로의 자원이 같은지 여부
</span><span class="n">dir_path2</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\src'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">file_path</span><span class="p">.</span><span class="n">samefile</span><span class="p">(</span><span class="n">dir_path</span><span class="p">))</span> <span class="c1">#False
</span><span class="k">print</span><span class="p">(</span><span class="n">dir_path</span><span class="p">.</span><span class="n">samefile</span><span class="p">(</span><span class="n">dir_path2</span><span class="p">))</span> <span class="c1">#True
</span></code></pre></div></div>

<h4 id="heading-os-명령어-관련-메소드">os 명령어 관련 메소드</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dir_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\src\my_dir'</span><span class="p">)</span>

<span class="c1"># mkdir(parents=False, exist_ok=False): 디렉토리 생성
# parents: 부모경로가 없으면 만들지 여부. exist_ok: 있는 디렉토리 일 경우 무시할 지 여부. False 설정시 Exception 발생
</span><span class="n">dir_path</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># rename(targetPath): 파일이나 디렉토리 이름을 target path로 변경한다. 변경된 경로를 반환한다.
# 부모디렉토리 경로를 다르게 하면 이동(move)가 된다.
</span><span class="n">new_path</span> <span class="o">=</span> <span class="n">dir_path</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="sa">r</span><span class="s">"c:\src\your_dir"</span><span class="p">)</span> <span class="c1">#my_dir의 이름을 your_dir로 변경
</span><span class="n">new_path</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\temp\your_dir'</span><span class="p">)</span> <span class="c1">#your_dir을 src 디렉토리에서 temp 디렉토리로 이동
</span>
<span class="c1"># rmdir(): 디렉토리 삭제. 디렉토리는 비어있어야 한다.
</span><span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\temp\your_dir'</span><span class="p">).</span><span class="n">rmdir</span><span class="p">()</span>

<span class="c1"># unlink(): 파일 삭제
</span><span class="n">file_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="sa">r</span><span class="s">'c:\src\test.py'</span><span class="p">)</span>
<span class="n">file_path</span><span class="p">.</span><span class="n">unlink</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="heading--연산자-overriding----경로-합치기">/ 연산자 overriding -  경로 합치기</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">'root_dir'</span><span class="p">)</span>
<span class="n">file_path</span> <span class="o">=</span> <span class="n">root_path</span> <span class="o">/</span> <span class="s">"sub_dir1"</span> <span class="o">/</span> <span class="s">"sub_dir2"</span> <span class="o">/</span> <span class="s">"a.txt"</span>
<span class="k">print</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>

<span class="c1"># os 모듈에서 경로 합치기
</span><span class="n">root_path</span> <span class="o">=</span> <span class="s">'root_dir'</span>
<span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">root_path</span><span class="p">,</span> <span class="s">'sub_dir1'</span><span class="p">,</span> <span class="s">'sub_dir2'</span><span class="p">,</span> <span class="s">'a.txt'</span><span class="p">)</span>
<span class="p">[</span><span class="n">out</span><span class="p">]</span>
<span class="n">root_dir</span>\<span class="n">sub_dir1</span>\<span class="n">sub_dir2</span>\<span class="n">a</span><span class="p">.</span><span class="n">txt</span>
</code></pre></div></div>
:ET